/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.castmart.jcountry;

import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class JCountryTest {
    @Test
    void testJCountryReturnsCountryDB() {
        JCountry jcountry = new JCountry();
        CountryDB countryDB = jcountry.getCountriesDB();
        assertNotNull(countryDB, "getCountriesDB should return an instance of the countries DB");
    }

    @Test
    void testJCountryDBReadsJson() {
        JCountry jcountry = new JCountry();
        CountryDB countryDB = jcountry.getCountriesDB();
        assertNotNull(countryDB, "getCountriesDB should return an instance of the countries DB");

        var dbByAlpha2 = countryDB.getCountriesMapByAlpha2();
        var dbByAlpha3 = countryDB.getCountriesMapByAlpha3();
        var dbByName = countryDB.getCountriesMapByName();
        assertNotNull(dbByAlpha2);
        assertNotNull(dbByAlpha3);
        assertNotNull(dbByName);

        assertTrue(!dbByAlpha2.isEmpty());
        assertTrue(!dbByAlpha3.isEmpty());
        assertTrue(!dbByName.isEmpty());

        assertEquals(dbByName.size(), dbByAlpha2.size());
        assertEquals(dbByAlpha2.size(), dbByAlpha3.size());
    }

    @Test
    void testJCountryReadTranslations() {
        JCountry jcountry = new JCountry();
        CountryDB countryDB = jcountry.getCountriesDB();

        Optional<ResourceBundle> bundle = countryDB.getCountriesTranslations(Locale.GERMAN);
        assertTrue(bundle.isPresent());

        Optional<ResourceBundle> bundleTwo = countryDB.getCountriesTranslations(new Locale("Unexistent Lang"));
        assertFalse(bundleTwo.isPresent());
    }

    @Test
    void testJCountryReadsTranslations() {
        // More than 50% of work population is covered with these languages.
        ArrayList<String> languages = new ArrayList<>(Arrays.asList("zh_CN", "zh_HK", "zh_TW", "es", "de", "bn", "bn_IN", "pt", "pt_BR", "ru", "ja", "hi", "ar", "pa", "fr", "tr", "ko"));
        JCountry jcountry = new JCountry();
        CountryDB countryDB = jcountry.getCountriesDB();

        languages.forEach( it -> {
            Optional<ResourceBundle> bundle = countryDB.getCountriesTranslations(new Locale(it));
            assertTrue(!bundle.isEmpty());
        });
    }

    @Test
    void getTranslatedCountryName() {
        JCountry jcountry = new JCountry();
        CountryDB countryDB = jcountry.getCountriesDB();
        var dbByAlpha2 = countryDB.getCountriesMapByAlpha2();

        Optional<ResourceBundle> bundle = countryDB.getCountriesTranslations(Locale.GERMAN);
        var translatedCountryName = bundle.get().getString(dbByAlpha2.get("MX").getName());

        assertEquals("Mexiko", translatedCountryName);
    }
}
