/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

version = "v0.0.1"

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:31.1-jre")
    implementation("org.json:json:20230618")

    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.2")
}

tasks.withType<Test> {
    useJUnitPlatform()
    testLogging {
        events("PASSED", "FAILED", "SKIPPED")
        showStandardStreams = true
    }
}

tasks.withType<Javadoc> {
    sourceSets.getByName("main").java.srcDirs.forEach {
        it.mkdirs()
    }
    source = sourceSets.getByName("main").allJava
    classpath += project.files(sourceSets.getByName("main").output.resourcesDir) + project.files(sourceSets.getByName("test").output.resourcesDir)
}

tasks.register<Jar>("sourcesJar") {
    manifest {
        attributes(Pair("Implementation-Title", project.name), Pair("Implementation-Version", project.version))
    }
    from(sourceSets.getByName("main").allSource)
    archiveClassifier.set("sources")
}

tasks.register<Jar>("javadocJar") {
    manifest {
        attributes(Pair("Implementation-Title", project.name), Pair("Implementation-Version", project.version))
    }
    dependsOn("javadoc")
    classifier = "javadoc"
    from(tasks.getByName("javadoc"))
}

artifacts {
    archives(tasks.getByName("sourcesJar"))
    archives(tasks.getByName("javadocJar"))
}